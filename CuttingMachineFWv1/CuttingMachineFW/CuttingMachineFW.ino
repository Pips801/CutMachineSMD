#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define version "1.0.1"

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Define buttons
#define BUTTON_UP A0
#define BUTTON_DOWN A1
#define BUTTON_BACK A2
#define BUTTON_SELECT A3

#define CUT_STEP 2
#define CUT_DIR 5
#define FEED_STEP 3
#define FEED_DIR 6
#define ENABLE 8


int menuIndex = 0;
int submenuIndex = 0;
bool inSubMenu = false;

//Set Default Unit Size
int SetSize = 1;
int SetUnits = 1;


const unsigned char SCLOGO[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xfe, 0x00, 0xfc, 0x03, 0xc0, 0x18, 0x03, 0xf8, 0x00, 0x3f, 0x80, 0x3f, 0x80, 0x3f, 0x00, 0x3f,
  0xfc, 0x00, 0xf8, 0x01, 0xc0, 0x18, 0x01, 0xf8, 0x00, 0x3f, 0x00, 0x3e, 0x00, 0x0f, 0x00, 0x1f,
  0xf8, 0x00, 0xf0, 0x01, 0xc0, 0x18, 0x00, 0xf8, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x07, 0x00, 0x0f,
  0xf0, 0x00, 0xe0, 0x01, 0xc0, 0x18, 0x00, 0x78, 0x00, 0x3c, 0x00, 0x38, 0x00, 0x07, 0x00, 0x07,
  0xe0, 0x01, 0xc0, 0x01, 0xc0, 0x18, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x03, 0x00, 0x03,
  0xc3, 0xff, 0xc3, 0xe1, 0xf0, 0x78, 0x78, 0x3f, 0x83, 0xf0, 0x1f, 0xf0, 0x1f, 0x03, 0x07, 0x83,
  0xc1, 0xff, 0xc3, 0xe1, 0xf0, 0x78, 0x7c, 0x3f, 0x83, 0xf0, 0x3f, 0xf0, 0x3f, 0x83, 0x07, 0xc3,
  0xc0, 0x01, 0xc0, 0x01, 0xf0, 0x78, 0x7c, 0x3f, 0x83, 0xf0, 0x7f, 0xf0, 0x7f, 0xc3, 0x07, 0xc3,
  0xc0, 0x00, 0xc0, 0x01, 0xf0, 0x78, 0x7c, 0x3f, 0x83, 0xf0, 0x7f, 0xf0, 0x7f, 0xc3, 0x07, 0xc3,
  0xc0, 0x00, 0xc0, 0x01, 0xf0, 0x78, 0x7c, 0x3f, 0x83, 0xf0, 0x7f, 0xf0, 0x7f, 0xc3, 0x07, 0xc3,
  0xf0, 0x00, 0xc0, 0x01, 0xf0, 0x78, 0x7c, 0x3f, 0x83, 0xf0, 0x7f, 0xf0, 0x7f, 0xc3, 0x07, 0xc3,
  0xff, 0xe0, 0xc3, 0xe1, 0xf0, 0x78, 0x7c, 0x3f, 0x83, 0xf0, 0x7f, 0xf0, 0x7f, 0xc3, 0x07, 0xc3,
  0xff, 0xe0, 0xc3, 0xe1, 0xf0, 0x78, 0x7c, 0x3f, 0x83, 0xf0, 0x7f, 0xf0, 0x3f, 0x83, 0x07, 0xc3,
  0xff, 0xe1, 0xc3, 0xe1, 0xf0, 0x78, 0x7c, 0x3f, 0x83, 0xf0, 0x7f, 0xf8, 0x1f, 0x03, 0x07, 0xc3,
  0xe0, 0x03, 0xc3, 0xe1, 0xc0, 0x18, 0x7c, 0x3f, 0x83, 0xf0, 0x00, 0x38, 0x0e, 0x07, 0x07, 0xc3,
  0xc0, 0x07, 0xc3, 0xe1, 0xc0, 0x18, 0x7c, 0x3f, 0x83, 0xf0, 0x00, 0x3c, 0x0e, 0x07, 0x07, 0xc3,
  0xc0, 0x0f, 0xc3, 0xe1, 0xc0, 0x18, 0x7c, 0x3f, 0x83, 0xf0, 0x00, 0x3e, 0x0e, 0x0f, 0x07, 0xc3,
  0xc0, 0x1f, 0xc3, 0xe1, 0xc0, 0x18, 0x7c, 0x3f, 0x83, 0xfc, 0x00, 0x3f, 0x8e, 0x3f, 0x07, 0xc3,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
  SCLOGO
};





void setup() {
  pinMode(BUTTON_UP, INPUT_PULLUP);
  pinMode(BUTTON_DOWN, INPUT_PULLUP);
  pinMode(BUTTON_BACK, INPUT_PULLUP);
  pinMode(BUTTON_SELECT, INPUT_PULLUP);

  pinMode(CUT_STEP, OUTPUT);
  pinMode(CUT_DIR, OUTPUT);
  pinMode(FEED_STEP, OUTPUT);
  pinMode(FEED_DIR, OUTPUT);

  pinMode(ENABLE, OUTPUT);
  digitalWrite(ENABLE, LOW);

  // Initialize the OLED display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(2000);
  display.clearDisplay();
  FirmwareDisplay();
  delay(2000);
  LogoDisplay();
  delay(2000);
  displayIdleScreen();
}

void loop() {
  if (digitalRead(BUTTON_SELECT) == LOW) {
    navigateMenu();
  }
}

void FirmwareDisplay() {
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.print("Firmware: ");
  display.println(version);
  display.display();
}

void LogoDisplay() {
  display.clearDisplay();
  display.drawBitmap(0, 0, SCLOGO, 128, 64, SSD1306_WHITE);
  display.display();
}

void displayIdleScreen() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.setTextSize(2);
  display.println("IDLE");
  display.setTextSize(1);
  display.print("Set Size: ");
  display.println(SetSize);
  display.print("Set Units: ");
  display.println(SetUnits);
  display.display();
}

void navigateMenu() {
  delay(200);
  while (true) {
    displayMenu();
    if (digitalRead(BUTTON_SELECT) == LOW) {
      if (inSubMenu) {
        executeSubmenuOption();
      } else {
        enterSubMenu();
      }
    } else if (digitalRead(BUTTON_BACK) == LOW) {
      if (inSubMenu) {
        inSubMenu = false;
        submenuIndex = 0;
      } else {
        displayIdleScreen();
        return;
      }
    } else if (digitalRead(BUTTON_UP) == LOW) {
      if (inSubMenu) {
        submenuIndex = (submenuIndex > 0) ? submenuIndex - 1 : getMaxSubMenuIndex();
      } else {
        menuIndex = (menuIndex > 0) ? menuIndex - 1 : 2;
      }
    } else if (digitalRead(BUTTON_DOWN) == LOW) {
      if (inSubMenu) {
        submenuIndex = (submenuIndex < getMaxSubMenuIndex()) ? submenuIndex + 1 : 0;
      } else {
        menuIndex = (menuIndex < 2) ? menuIndex + 1 : 0;
      }
    }
    delay(200);
  }
}

void displayMenu() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  if (!inSubMenu) {
    display.setTextSize(2);
    display.println("MAIN MENU");
    display.setTextSize(1);
    if (menuIndex == 0) display.println("> CUT!");
    else display.println("  Cut!");
    if (menuIndex == 1) display.println("> SETTINGS");
    else display.println("  Settings");
    if (menuIndex == 2) display.println("> CALIBRATE");
    else display.println("  Calibrate");
  } else {
    if (menuIndex == 0) {
      display.setTextSize(2);
      display.println("START CUT!");
      display.setTextSize(1);
      if (submenuIndex == 0) {
        display.setTextSize(3);
        display.println("> GO!");
      } else {
        display.setTextSize(3);
        display.println("  Go");
      }
      if (submenuIndex == 1) {
        display.setTextSize(1);
        display.println("> TEST CUT");
      } else {
        display.setTextSize(1);
        display.println("  Test Cut");
      }
    }
    if (menuIndex == 1) {
      display.setTextSize(2);
      display.println("SETTINGS");
      display.setTextSize(1);
      if (submenuIndex == 0) display.println("> Set Size: " + String(SetSize));
      else display.println("  Set Size: " + String(SetSize));
      if (submenuIndex == 1) display.println("> Set Units: " + String(SetUnits));
      else display.println("  Set Units: " + String(SetUnits));
    }
    if (menuIndex == 2) {
      display.setTextSize(2);
      display.println("CALIBRATE");
      display.setTextSize(1);
      if (submenuIndex == 0) display.println("> ADJUST FWD");
      else display.println("  Adjust Fwd");
      if (submenuIndex == 1) display.println("> ADJUST REV");
      else display.println("  Adjust Rev");
    }
  }
  display.display();
}

void enterSubMenu() {
  inSubMenu = true;
  submenuIndex = 0;
}

int getMaxSubMenuIndex() {
  switch (menuIndex) {
    case 0: return 1; // CUT! menu has 2 options: Go and Test Cut
    case 1: return 1; // Settings menu has 2 options: Set Size and Set Units
    case 2: return 1; // Calibrate menu has 2 options: Adjust FWD and Adjust REV
    default: return 0;
  }
}

void executeSubmenuOption() {
  switch (menuIndex) {
    case 0: // CUT!
      if (submenuIndex == 0) runCutProgram();
      else if (submenuIndex == 1) runCutTest();
      break;
    case 1: // Settings
      if (submenuIndex == 0) setSize();
      else if (submenuIndex == 1) setUnits();
      break;
    case 2: // Calibrate
      if (submenuIndex == 0) runAdjustFWD();
      else if (submenuIndex == 1) runAdjustREV();
      break;
  }
}

void runCutProgram() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Executing GOBABY");
  display.display();
  for (int rp = 0; rp < SetUnits; rp++) {
    FEED(SetSize);
    CUT();
  }
  delay(200);
  inSubMenu = false;
}

void runCutTest() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Executing Test Cut");
  display.display();
  FEED(1);
  CUT();
  delay(200);
  inSubMenu = false;
}

void CUT() {
  int cutsteps = 800;
    for(int x = 0; x < cutsteps; x++) {
    digitalWrite(CUT_STEP,HIGH);
    delayMicroseconds(100); // Fast Rotation
    digitalWrite(CUT_STEP,LOW);
    delayMicroseconds(100); // Fast Rotation
    display.clearDisplay();
    }
  delay(100);
}

void FEED(int feedcount) {
  int feedsteps = feedcount * 10;
  digitalWrite(FEED_DIR,LOW);  // Set Feed Forward for Feed
  for(int y = 0; y < feedsteps; y++) {
    digitalWrite(FEED_STEP,HIGH);
    delayMicroseconds(700); // Fast Rotation
    digitalWrite(FEED_STEP,LOW);
    delayMicroseconds(700); // Fast Rotation
  }
  delay(100);
}


void setSize() {
  while (true) {
    if (digitalRead(BUTTON_UP) == LOW && SetSize < 1000) SetSize++;
    else if (digitalRead(BUTTON_DOWN) == LOW && SetSize > 1) SetSize--;
    delay(200);
    if (digitalRead(BUTTON_SELECT) == LOW) break;
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Set Size: ");
    display.println(SetSize);
    display.display();
  }
}

void setUnits() {
  while (true) {
    if (digitalRead(BUTTON_UP) == LOW && SetUnits < 1000) SetUnits++;
    else if (digitalRead(BUTTON_DOWN) == LOW && SetUnits > 1) SetUnits--;
    delay(200);
    if (digitalRead(BUTTON_SELECT) == LOW) break;
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Set Units: ");
    display.println(SetUnits);
    display.display();
  }
}

void runAdjustFWD() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Executing GOFWD");
  display.display();

    digitalWrite(FEED_DIR,LOW);
    digitalWrite(FEED_STEP,HIGH);
    delayMicroseconds(1000);
    digitalWrite(FEED_STEP,LOW);

  delay(150);
  displayMenu();
}

void runAdjustREV() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Executing GOREV");
  display.display();

    digitalWrite(FEED_DIR,HIGH);
    digitalWrite(FEED_STEP,HIGH);
    delayMicroseconds(1000);
    digitalWrite(FEED_STEP,LOW);

  delay(150);
  displayMenu();
}
